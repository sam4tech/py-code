Question 1 : What is the difference between == And is operator ?
Solution:

== (Equality operator)           |   is (Identity operator)

Compares the equality of objects  | Checks if different variables are pointing to same object in memory.



Question 2 : XOR operators 

XOR is a bitwise operator that is also known as Exclusive OR.
It is a logical operator which outputs 1 when either of the operands is 1 , but both are not 1 and both are not 0.

The symbol for XOR in Python is '^'

eg: num3 = num1 ^ num2


0 ^ 0 = 0
0 ^ 1 = 1
0 ^ 0 = 1
0 ^ 0 = 0


Question 3 : What is the life scope of a variable and what are the types of life scope  ?
Solution : 
Life scope of a variable is the location where we can find the variable and also access it if required.


Its types :
1. Local variable.
2. Global variable.


Local Variable :
Variables that are initialized within a function, and are unique to that function. 
It cannot be accessed outside of this function.

Example :

def func():
 
    # local variable
    s = "I love python"
    print(s)
 
# Driver code
func()

OUTPUT :
I love python

## If 's' is accessed outside the function func(), then it will give an error.

Global Variable :
Variables that are declared outside of any function , and are not specified to any function. 
It can be used in any part of the program.

Example :

# This function uses global variable s
def func():
	print(s)


# Global scope
s = "I love python"
func()

OUTPUT :
I love python

## Global and Local Variables having the Same Name
VARIABLE SHADOWING

Suppose a variable with the same name is defined inside the scope of the function then 
it will print the value given inside the function only and not the global value.
Python treats these variables as completely separate variables. 
The global variable 's' is said to be shadowed by the local variable ''s''. 

Example :
 
# This function has a variable with
# name same as s.
def f():
	s = "Me too."
	print(s)

# Global scope
s = "I love python"
f()
print(s)

OUTPUT :
Me too.
I love python



Question : STRING INDEXING AND SLICING

Indexing is the process of accessing an element in a sequence using its position in the sequence (its index).
Indexing starts from 0, which means the first element in a sequence is at position 0, the second element is at position 1, and so on.
Square brackets are used to access the elements in a sequence.

We can access characters in a String in Two ways :

- Accessing Characters by Positive Index Number
- Accessing Characters by Negative Index Number

 P  Y  T  H  O  N
 0  1  2  3  4  5 ##  Positive Index Number
-6 -5 -4 -3 -2 -1 ##  Negative Index Number



Example : 

my_list = ['apple', 'banana', 'cherry', 'date']
print(my_list[0]) # output: 'apple'
print(my_list[1]) # output: 'banana'

str = "I love python"
print(str[0]) # I
print(str[3]) # o
print(str[-1]) # n
print(str[-5]) # y


## STRING slicing

Slicing is the process of accessing a sub-sequence of a sequence by specifying a starting and ending index.
In Python, slicing is done using the colon : operator. 

sequence[ start_index : end_index : step_index ]
# start_index -> first element in the sub sequence.
# end_index  -> last element in the sub sequence EXCLUDED.
# step_index -> It is an OPTIONAL argument that determines the increment between each index for slicing.

Example :

my_list = ['apple', 'banana', 'cherry', 'date']
print(my_list[1:3]) # output: ['banana', 'cherry']

You can also omit either the start_index or the end_index in a slice to get all the elements from the beginning or end of the sequence.
Example :

my_list = ['apple', 'banana', 'cherry', 'date']
print(my_list[:2]) # output: ['apple', 'banana']
print(my_list[2:]) # output: ['cherry', 'date']


numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
odd_numbers = numbers[ : : 2]
print(odd_numbers)   # output: [1, 3, 5, 7, 9]


# declaring the string 
str ="Python is great !"

print("Original String :-") 
print(str)  ## Python is great !

# reversing the string using slicing 
print("Reverse String :-") 
print(str[: : -1])  ## ! taerg si nohtyP


